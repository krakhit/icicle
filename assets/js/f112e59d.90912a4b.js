"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2248],{5680:(e,t,a)=>{a.d(t,{xA:()=>h,yg:()=>g});var n=a(6540);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},h=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,h=r(e,["components","mdxType","originalType","parentName"]),p=l(a),u=i,g=p["".concat(c,".").concat(u)]||p[u]||d[u]||o;return a?n.createElement(g,s(s({ref:t},h),{},{components:a})):n.createElement(g,s({ref:t},h))}));function g(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,s=new Array(o);s[0]=u;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r[p]="string"==typeof e?e:i,s[1]=r;for(var l=2;l<o;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8127:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var n=a(8168),i=(a(6540),a(5680));a(1873);const o={},s="ICICLE Hashing Logic",r={unversionedId:"icicle/primitives/hash",id:"icicle/primitives/hash",title:"ICICLE Hashing Logic",description:"Overview",source:"@site/docs/icicle/primitives/hash.md",sourceDirName:"icicle/primitives",slug:"/icicle/primitives/hash",permalink:"/icicle/primitives/hash",editUrl:"https://github.com/ingonyama-zk/icicle/tree/main/docs/docs/icicle/primitives/hash.md",tags:[],version:"current",lastUpdatedBy:"Miki",lastUpdatedAt:1732003548,formattedLastUpdatedAt:"11/19/2024",frontMatter:{},sidebar:"GettingStartedSidebar",previous:{title:"Polynomial API Overview",permalink:"/icicle/polynomials/overview"},next:{title:"Merkle Tree API Documentation",permalink:"/icicle/primitives/merkle"}},c={},l=[{value:"Overview",id:"overview",level:2},{value:"Hashing Logic",id:"hashing-logic",level:2},{value:"Batch Hashing",id:"batch-hashing",level:2},{value:"Supported Hash Algorithms",id:"supported-hash-algorithms",level:2},{value:"Keccak and SHA3",id:"keccak-and-sha3",level:3},{value:"Blake2s",id:"blake2s",level:3},{value:"Poseidon",id:"poseidon",level:3},{value:"Using Hash API",id:"using-hash-api",level:2},{value:"1. Creating a Hasher Object",id:"1-creating-a-hasher-object",level:3},{value:"2. Hashing Data",id:"2-hashing-data",level:3},{value:"3. Batch Hashing",id:"3-batch-hashing",level:3},{value:"4. Posidon sponge function",id:"4-posidon-sponge-function",level:3},{value:"Supported Bindings",id:"supported-bindings",level:3}],h={toc:l},p="wrapper";function d(e){let{components:t,...a}=e;return(0,i.yg)(p,(0,n.A)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"icicle-hashing-logic"},"ICICLE Hashing Logic"),(0,i.yg)("h2",{id:"overview"},"Overview"),(0,i.yg)("p",null,"ICICLE\u2019s hashing system is designed to be flexible, efficient, and optimized for both general-purpose and cryptographic operations. Hash functions are essential in operations such as generating commitments, constructing Merkle trees, executing the Sumcheck protocol, and more."),(0,i.yg)("p",null,"ICICLE provides an easy-to-use interface for hashing on both CPU and GPU, with transparent backend selection. You can choose between several hash algorithms such as Keccak-256, Keccak-512, SHA3-256, SHA3-512, Blake2s, Poseidon and more, which are optimized for processing both general data and cryptographic field elements or elliptic curve points."),(0,i.yg)("h2",{id:"hashing-logic"},"Hashing Logic"),(0,i.yg)("p",null,"Hashing in ICICLE involves creating a hasher instance for the desired algorithm, configuring the hash function if needed, and then processing the data. Data can be provided as strings, arrays, or field elements, and the output is collected in a buffer that automatically adapts to the size of the hashed data."),(0,i.yg)("h2",{id:"batch-hashing"},"Batch Hashing"),(0,i.yg)("p",null,"For scenarios where large datasets need to be hashed efficiently, ICICLE supports batch hashing. The batch size is automatically derived from the output size, making it adaptable and optimized for parallel computation on the GPU (when using the CUDA backend). This is useful for Merkle-trees and more."),(0,i.yg)("h2",{id:"supported-hash-algorithms"},"Supported Hash Algorithms"),(0,i.yg)("p",null,"ICICLE supports the following hash functions:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Keccak-256")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Keccak-512")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"SHA3-256")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"SHA3-512")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Blake2s")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Poseidon"))),(0,i.yg)("div",{className:"admonition admonition-info alert alert--info"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("p",{parentName:"div"},"Additional hash functions might be added in the future. Stay tuned!"))),(0,i.yg)("h3",{id:"keccak-and-sha3"},"Keccak and SHA3"),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://keccak.team/files/Keccak-implementation-3.2.pdf"},"Keccak")," is a cryptographic hash function designed by Guido Bertoni, Joan Daemen, Micha\xebl Peeters, and Gilles Van Assche. It was selected as the winner of the NIST hash function competition, becoming the basis for the ",(0,i.yg)("a",{parentName:"p",href:"https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf"},"SHA-3 standard"),"."),(0,i.yg)("p",null,"Keccak can take input messages of any length and produce a fixed-size hash. It uses the sponge construction, which absorbs the input data and squeezes out the final hash value. The permutation function, operating on a state array, applies iterative rounds of operations to derive the hash."),(0,i.yg)("h3",{id:"blake2s"},"Blake2s"),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://www.rfc-editor.org/rfc/rfc7693.txt"},"Blake2s")," is an optimized cryptographic hash function that provides high performance while ensuring strong security. Blake2s is ideal for hashing small data (such as field elements), especially when speed is crucial. It produces a 256-bit (32-byte) output and is often used in cryptographic protocols."),(0,i.yg)("h3",{id:"poseidon"},"Poseidon"),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://eprint.iacr.org/2019/458"},"Poseidon")," is a cryptographic hash function designed specifically for field elements. It is highly optimized for zero-knowledge proofs (ZKPs) and is commonly used in ZK-SNARK systems. Poseidon\u2019s main strength lies in its arithmetization-friendly design, meaning it can be efficiently expressed as arithmetic constraints within a ZK-SNARK circuit."),(0,i.yg)("p",null,"Traditional hash functions, such as SHA-2, are difficult to represent within ZK circuits because they involve complex bitwise operations that don\u2019t translate efficiently into arithmetic operations. Poseidon, however, is specifically designed to minimize the number of constraints required in these circuits, making it significantly more efficient for use in ZK-SNARKs and other cryptographic protocols that require hashing over field elements."),(0,i.yg)("p",null,"Currently the Poseidon implementation is the Optimized Poseidon (",(0,i.yg)("a",{parentName:"p",href:"https://hackmd.io/@jake/poseidon-spec#Optimized-Poseidon"},"https://hackmd.io/@jake/poseidon-spec#Optimized-Poseidon"),"). Optimized Poseidon significantly decreases the calculation time of the hash."),(0,i.yg)("p",null,"The optional ",(0,i.yg)("inlineCode",{parentName:"p"},"domain_tag")," pointer parameter enables domain separation, allowing isolation of hash outputs across different contexts or applications."),(0,i.yg)("h2",{id:"using-hash-api"},"Using Hash API"),(0,i.yg)("h3",{id:"1-creating-a-hasher-object"},"1. Creating a Hasher Object"),(0,i.yg)("p",null,"First, you need to create a hasher object for the specific hash function you want to use:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "icicle/hash/keccak.h"\n#include "icicle/hash/blake2s.h"\n#include "icicle/hash/poseidon.h"\n\n// Create hasher instances for different algorithms\nauto keccak256 = Keccak256::create();\nauto keccak512 = Keccak512::create();\nauto sha3_256 = Sha3_256::create();\nauto sha3_512 = Sha3_512::create();\nauto blake2s = Blake2s::create();\n// Poseidon requires specifying the field-type and t parameter (supported 3,5,9,12) as defined by the Poseidon paper.\nauto poseidon = Poseidon::create<scalar_t>(t); \n// Optionally, Poseidon can accept a domain-tag, which is a field element used to separate applications or contexts.\n// The domain tag acts as the first input to the hash function, with the remaining t-1 inputs following it.\nscalar_t domain_tag = scalar_t::zero(); // Example using zero; this can be set to any valid field element.\nauto poseidon_with_domain_tag = Poseidon::create<scalar_t>(t, &domain_tag);\n// This version of the hasher with a domain tag expects t-1 additional inputs for hashing.\n')),(0,i.yg)("h3",{id:"2-hashing-data"},"2. Hashing Data"),(0,i.yg)("p",null,"Once you have a hasher object, you can hash any input data by passing the input, its size, a configuration, and an output buffer:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},"/**\n * @brief Perform a hash operation.\n *\n * This function delegates the hash operation to the backend.\n *\n * @param input Pointer to the input data as bytes.\n * @param size The number of bytes to hash. If 0, the default chunk size is used.\n * @param config Configuration options for the hash operation.\n * @param output Pointer to the output data as bytes.\n * @return An error code of type eIcicleError indicating success or failure.\n */\neIcicleError hash(const std::byte* input, uint64_t size, const HashConfig& config, std::byte* output) const;\n\n/**\n * @brief Perform a hash operation using typed data.\n *\n * Converts input and output types to `std::byte` pointers and delegates the call to the backend.\n *\n * @tparam PREIMAGE The type of the input data.\n * @tparam IMAGE The type of the output data.\n * @param input Pointer to the input data.\n * @param size The number of elements of type `PREIMAGE` to a single hasher.\n * @param config Configuration options for the hash operation.\n * @param output Pointer to the output data.\n * @return An error code of type eIcicleError indicating success or failure.\n */\ntemplate <typename PREIMAGE, typename IMAGE>\neIcicleError hash(const PREIMAGE* input, uint64_t size, const HashConfig& config, IMAGE* output) const;\n")),(0,i.yg)("p",null,"Example Usage:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'// Using the Blake2s hasher\nconst std::string input = "Hello, I am Blake2s!";\nconst uint64_t output_size = 32; // Blake2s outputs 32 bytes\nauto output = std::make_unique<std::byte[]>(output_size);\nauto config = default_hash_config();\n\neIcicleErr err = blake2s.hash(input.data(), input.size(), config, output.get());\n\n// Alternatively, use another hasher (e.g., Keccak256, SHA3-512)\n')),(0,i.yg)("h3",{id:"3-batch-hashing"},"3. Batch Hashing"),(0,i.yg)("p",null,"To perform batch hashing, set the ",(0,i.yg)("inlineCode",{parentName:"p"},"config.batch")," field to indicate the number of batches. This allows for multiple inputs to be hashed in parallel:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'auto config = default_hash_config();\nconfig.batch = 2;\n\nconst std::string input = "0123456789abcdef"; // This is a batch of "01234567" and "89abcdef"\nauto output = std::make_unique<std::byte[]>(32 * config.batch); // Allocate output for 2 batches\n\neIcicleErr err = keccak256.hash(input.data(), input.size() / config.batch, config, output.get());\n')),(0,i.yg)("h3",{id:"4-posidon-sponge-function"},"4. Posidon sponge function"),(0,i.yg)("p",null,"Currently the poseidon sponge function (Sec 2.1 of ",(0,i.yg)("a",{parentName:"p",href:"https://eprint.iacr.org/2019/458.pdf"},"https://eprint.iacr.org/2019/458.pdf")," ) isn't implemented."),(0,i.yg)("h3",{id:"supported-bindings"},"Supported Bindings"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"../rust-bindings/hash"},"Rust")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"../golang-bindings/hash"},"Go"))))}d.isMDXComponent=!0},1873:(e,t,a)=>{a(6540)}}]);