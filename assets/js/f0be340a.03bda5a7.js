"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2246],{5680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>m});var a=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(t),d=i,m=p["".concat(l,".").concat(d)]||p[d]||g[d]||r;return t?a.createElement(m,o(o({ref:n},s),{},{components:t})):a.createElement(m,o({ref:n},s))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[p]="string"==typeof e?e:i,o[1]=c;for(var u=2;u<r;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2172:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>c,toc:()=>u});var a=t(8168),i=(t(6540),t(5680));t(1873);const r={},o="Keccak",c={unversionedId:"icicle/rust-bindings/keccak",id:"icicle/rust-bindings/keccak",title:"Keccak",description:"TODO update for V3",source:"@site/docs/icicle/rust-bindings/keccak.md",sourceDirName:"icicle/rust-bindings",slug:"/icicle/rust-bindings/keccak",permalink:"/icicle/rust-bindings/keccak",editUrl:"https://github.com/ingonyama-zk/icicle/tree/main/docs/icicle/rust-bindings/keccak.md",tags:[],version:"current",lastUpdatedBy:"Otsar",lastUpdatedAt:1725431562,formattedLastUpdatedAt:"9/4/2024",frontMatter:{}},l={},u=[{value:"Keccak Example",id:"keccak-example",level:2},{value:"Keccak Methods",id:"keccak-methods",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"HashConfig",id:"hashconfig",level:2},{value:"Fields",id:"fields",level:3},{value:"Usage",id:"usage",level:3}],s={toc:u},p="wrapper";function g(e){let{components:n,...t}=e;return(0,i.yg)(p,(0,a.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"keccak"},"Keccak"),(0,i.yg)("p",null,"TODO update for V3"),(0,i.yg)("h2",{id:"keccak-example"},"Keccak Example"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-rust"},'use icicle_cuda_runtime::memory::{DeviceVec, HostSlice};\nuse icicle_hash::keccak::{keccak256, HashConfig};\nuse rand::{self, Rng};\n\nfn main() {\n    let mut rng = rand::thread_rng();\n    let initial_data: Vec<u8> = (0..120).map(|_| rng.gen::<u8>()).collect();\n    println!("initial data: {}", hex::encode(&initial_data));\n    let input = HostSlice::<u8>::from_slice(initial_data.as_slice());\n    let mut output = DeviceVec::<u8>::cuda_malloc(32).unwrap();\n\n    let mut config = HashConfig::default();\n    keccak256(input, initial_data.len() as i32, 1, &mut output[..], &mut config).expect("Failed to execute keccak256 hashing");\n\n    let mut output_host = vec![0_u8; 32];\n    output.copy_to_host(HostSlice::from_mut_slice(&mut output_host[..])).unwrap();\n\n    println!("keccak256 result: {}", hex::encode(&output_host));\n}\n')),(0,i.yg)("h2",{id:"keccak-methods"},"Keccak Methods"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-rust"},"pub fn keccak256(\n    input: &(impl HostOrDeviceSlice<u8> + ?Sized),\n    input_block_size: i32,\n    number_of_blocks: i32,\n    output: &mut (impl HostOrDeviceSlice<u8> + ?Sized),\n    config: &mut HashConfig,\n) -> IcicleResult<()>\n\npub fn keccak512(\n    input: &(impl HostOrDeviceSlice<u8> + ?Sized),\n    input_block_size: i32,\n    number_of_blocks: i32,\n    output: &mut (impl HostOrDeviceSlice<u8> + ?Sized),\n    config: &mut HashConfig,\n) -> IcicleResult<()> \n")),(0,i.yg)("h3",{id:"parameters"},"Parameters"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"strong"},"input")),": A slice containing the input data for the Keccak256 hash function. It can reside in either host memory or device memory."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"strong"},"input_block_size")),": An integer specifying the size of the input data for a single hash."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"strong"},"number_of_blocks")),": An integer specifying the number of results in the hash batch."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"strong"},"output")),": A slice where the resulting hash will be stored. This slice can be in host or device memory."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"strong"},"config")),": A pointer to a ",(0,i.yg)("inlineCode",{parentName:"li"},"HashConfig")," object, which contains various configuration options for the Keccak256 operation.")),(0,i.yg)("h3",{id:"return-value"},"Return Value"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"strong"},"IcicleResult")),": Returns a CUDA error code indicating the success or failure of the Keccak256/Keccak512 operation.")),(0,i.yg)("h2",{id:"hashconfig"},"HashConfig"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"HashConfig")," structure holds configuration parameters for the Keccak256/Keccak512 operation, allowing customization of its behavior to optimize performance based on the specifics of the operation or the underlying hardware."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-rust"},"pub struct HashConfig<'a> {\n    pub ctx: DeviceContext<'a>,\n    pub are_inputs_on_device: bool,\n    pub are_outputs_on_device: bool,\n    pub is_async: bool,\n}\n")),(0,i.yg)("h3",{id:"fields"},"Fields"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"strong"},"ctx")),": Device context containing details like device id and stream."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"strong"},"are_inputs_on_device")),": Indicates if input data is located on the device."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"strong"},"are_outputs_on_device")),": Indicates if output hash is stored on the device."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"strong"},"is_async")),": If true, runs the Keccak256/Keccak512 operation asynchronously.")),(0,i.yg)("h3",{id:"usage"},"Usage"),(0,i.yg)("p",null,"Example initialization with default settings:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-rust"},"let default_config = HashConfig::default();\n")),(0,i.yg)("p",null,"Customizing the configuration:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-rust"},"let custom_config = NTTConfig {\n    ctx: custom_device_context,\n    are_inputs_on_device: true,\n    are_outputs_on_device: true,\n    is_async: false,\n};\n")))}g.isMDXComponent=!0},1873:(e,n,t)=>{t(6540)}}]);