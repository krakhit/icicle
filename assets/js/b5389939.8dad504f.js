"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5411],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var i=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?i.createElement(g,a(a({ref:t},p),{},{components:n})):i.createElement(g,a({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1519:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(8168),r=(n(6540),n(5680));n(1873);const o={},a="Vector Operations API",l={unversionedId:"icicle/rust-bindings/vec-ops",id:"icicle/rust-bindings/vec-ops",title:"Vector Operations API",description:"Our vector operations API includes fundamental methods for addition, subtraction, and multiplication of vectors, with support for both host and device memory, as well as batched operations.",source:"@site/docs/icicle/rust-bindings/vec-ops.md",sourceDirName:"icicle/rust-bindings",slug:"/icicle/rust-bindings/vec-ops",permalink:"/icicle/rust-bindings/vec-ops",editUrl:"https://github.com/ingonyama-zk/icicle/tree/main/docs/docs/icicle/rust-bindings/vec-ops.md",tags:[],version:"current",lastUpdatedBy:"Miki",lastUpdatedAt:1732003548,formattedLastUpdatedAt:"11/19/2024",frontMatter:{},sidebar:"GettingStartedSidebar",previous:{title:"ECNTT",permalink:"/icicle/rust-bindings/ecntt"},next:{title:"Rust FFI Bindings for Univariate Polynomial",permalink:"/icicle/rust-bindings/polynomials"}},s={},c=[{value:"Vector Operations Configuration",id:"vector-operations-configuration",level:2},{value:"<code>VecOpsConfig</code>",id:"vecopsconfig",level:3},{value:"Fields",id:"fields",level:4},{value:"Default Configuration",id:"default-configuration",level:3},{value:"Vector Operations",id:"vector-operations",level:2},{value:"Methods",id:"methods",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.yg)(u,(0,i.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"vector-operations-api"},"Vector Operations API"),(0,r.yg)("p",null,"Our vector operations API includes fundamental methods for addition, subtraction, and multiplication of vectors, with support for both host and device memory, as well as batched operations."),(0,r.yg)("h2",{id:"vector-operations-configuration"},"Vector Operations Configuration"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"VecOpsConfig")," struct encapsulates the settings for vector operations, including device context, operation modes, and batching parameters."),(0,r.yg)("h3",{id:"vecopsconfig"},(0,r.yg)("inlineCode",{parentName:"h3"},"VecOpsConfig")),(0,r.yg)("p",null,"Defines configuration parameters for vector operations."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"pub struct VecOpsConfig {\n    pub stream_handle: IcicleStreamHandle,\n    pub is_a_on_device: bool,\n    pub is_b_on_device: bool,\n    pub is_result_on_device: bool,\n    pub is_async: bool,\n    pub batch_size: usize,\n    pub columns_batch: bool,\n    pub ext: ConfigExtension,\n}\n")),(0,r.yg)("h4",{id:"fields"},"Fields"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"stream_handle: IcicleStreamHandle")),": Specifies the stream (queue) to use for async execution")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"is_a_on_device: bool")),": Indicates whether the input data a has been preloaded on the device memory. If ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," inputs will be copied from host to device.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"is_b_on_device: bool")),": Indicates whether the input b data has been preloaded on the device memory. If ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," inputs will be copied from host to device.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"is_result_on_device: bool")),": Indicates whether the output data is preloaded in device memory. If ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," outputs will be copied from host to device.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"is_async: bool")),": Specifies whether the NTT operation should be performed asynchronously.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"batch_size: usize")),": Number of vector operations to process in a single batch. Each operation will be performed independently on each batch element.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"columns_batch: bool")),": true if the batched vectors are stored as columns in a 2D array (i.e., the vectors are strided in memory as columns of a matrix). If false, the batched vectors are stored contiguously in memory (e.g., as rows or in a flat array).")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"ext: ConfigExtension")),": extended configuration for backend."))),(0,r.yg)("h3",{id:"default-configuration"},"Default Configuration"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"VecOpsConfig")," can be initialized with default settings tailored for a specific device:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"let cfg = VecOpsConfig::default();\n")),(0,r.yg)("h2",{id:"vector-operations"},"Vector Operations"),(0,r.yg)("p",null,"Vector operations are implemented through the ",(0,r.yg)("inlineCode",{parentName:"p"},"VecOps")," trait, providing methods for addition, subtraction, and multiplication of vectors. These methods support both single and batched operations based on the batch_size and columns_batch configurations."),(0,r.yg)("h3",{id:"methods"},"Methods"),(0,r.yg)("p",null,"All operations are element-wise operations, and the results placed into the ",(0,r.yg)("inlineCode",{parentName:"p"},"result")," param. These operations are not in place, except for accumulate."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"add")),": Computes the element-wise sum of two vectors."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"accumulate")),": Sum input b to a inplace."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"sub")),": Computes the element-wise difference between two vectors."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"mul")),": Performs element-wise multiplication of two vectors."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"transpose")),": Performs matrix transpose."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"bit_reverse/bit_reverse_inplace")),": Reverse order of elements based on bit-reverse.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"pub fn add_scalars<F>(\n    a: &(impl HostOrDeviceSlice<F> + ?Sized),\n    b: &(impl HostOrDeviceSlice<F> + ?Sized),\n    result: &mut (impl HostOrDeviceSlice<F> + ?Sized),\n    cfg: &VecOpsConfig,\n) -> Result<(), eIcicleError>;\n\npub fn accumulate_scalars<F>(\n    a: &mut (impl HostOrDeviceSlice<F> + ?Sized),\n    b: &(impl HostOrDeviceSlice<F> + ?Sized),\n    cfg: &VecOpsConfig,\n) -> Result<(), eIcicleError>;\n\npub fn sub_scalars<F>(\n    a: &(impl HostOrDeviceSlice<F> + ?Sized),\n    b: &(impl HostOrDeviceSlice<F> + ?Sized),\n    result: &mut (impl HostOrDeviceSlice<F> + ?Sized),\n    cfg: &VecOpsConfig,\n) -> Result<(), eIcicleError>;\n\npub fn mul_scalars<F>(\n    a: &(impl HostOrDeviceSlice<F> + ?Sized),\n    b: &(impl HostOrDeviceSlice<F> + ?Sized),\n    result: &mut (impl HostOrDeviceSlice<F> + ?Sized),\n    cfg: &VecOpsConfig,\n) -> Result<(), eIcicleError>;\n\npub fn transpose_matrix<F>(\n    input: &(impl HostOrDeviceSlice<F> + ?Sized),\n    nof_rows: u32,\n    nof_cols: u32,\n    output: &mut (impl HostOrDeviceSlice<F> + ?Sized),\n    cfg: &VecOpsConfig,\n) -> Result<(), eIcicleError>;\n\npub fn bit_reverse<F>(\n    input: &(impl HostOrDeviceSlice<F> + ?Sized),\n    cfg: &VecOpsConfig,\n    output: &mut (impl HostOrDeviceSlice<F> + ?Sized),\n) -> Result<(), eIcicleError>;\n\npub fn bit_reverse_inplace<F>(\n    input: &mut (impl HostOrDeviceSlice<F> + ?Sized),\n    cfg: &VecOpsConfig,\n) -> Result<(), eIcicleError>;\n")))}d.isMDXComponent=!0},1873:(e,t,n)=>{n(6540)}}]);