"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1452],{5680:(e,a,n)=>{n.d(a,{xA:()=>o,yg:()=>c});var t=n(6540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function m(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?m(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function p(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},m=Object.keys(e);for(t=0;t<m.length;t++)n=m[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(t=0;t<m.length;t++)n=m[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),l=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},o=function(e){var a=l(e.components);return t.createElement(i.Provider,{value:a},e.children)},g="mdxType",y={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},N=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,m=e.originalType,i=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),g=l(n),N=r,c=g["".concat(i,".").concat(N)]||g[N]||y[N]||m;return n?t.createElement(c,s(s({ref:a},o),{},{components:n})):t.createElement(c,s({ref:a},o))}));function c(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var m=n.length,s=new Array(m);s[0]=N;var p={};for(var i in a)hasOwnProperty.call(a,i)&&(p[i]=a[i]);p.originalType=e,p[g]="string"==typeof e?e:r,s[1]=p;for(var l=2;l<m;l++)s[l]=n[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}N.displayName="MDXCreateElement"},6513:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>y,frontMatter:()=>m,metadata:()=>p,toc:()=>l});var t=n(8168),r=(n(6540),n(5680));n(1873);const m={},s="Merkle Tree API Documentation",p={unversionedId:"icicle/primitives/merkle",id:"icicle/primitives/merkle",title:"Merkle Tree API Documentation",description:"What is a Merkle Tree?",source:"@site/docs/icicle/primitives/merkle.md",sourceDirName:"icicle/primitives",slug:"/icicle/primitives/merkle",permalink:"/icicle/primitives/merkle",editUrl:"https://github.com/ingonyama-zk/icicle/tree/main/docs/icicle/primitives/merkle.md",tags:[],version:"current",lastUpdatedBy:"Miki",lastUpdatedAt:1730030143,formattedLastUpdatedAt:"10/27/2024",frontMatter:{},sidebar:"GettingStartedSidebar",previous:{title:"ICICLE Hashing Logic",permalink:"/icicle/primitives/hash"},next:{title:"Golang bindings",permalink:"/icicle/golang-bindings"}},i={},l=[{value:"What is a Merkle Tree?",id:"what-is-a-merkle-tree",level:2},{value:"Tree Structure and Configuration",id:"tree-structure-and-configuration",level:2},{value:"Structure Definition",id:"structure-definition",level:3},{value:"Defining a Merkle Tree",id:"defining-a-merkle-tree",level:3},{value:"Building the Tree",id:"building-the-tree",level:3},{value:"Tree Examples",id:"tree-examples",level:2},{value:"Example A: Binary Tree",id:"example-a-binary-tree",level:3},{value:"Example B: Tree with Arity 4",id:"example-b-tree-with-arity-4",level:3},{value:"Padding",id:"padding",level:2},{value:"Root as Commitment",id:"root-as-commitment",level:2},{value:"Generating Merkle Proofs",id:"generating-merkle-proofs",level:2},{value:"Example: Generating a Proof",id:"example-generating-a-proof",level:3},{value:"Verifying Merkle Proofs",id:"verifying-merkle-proofs",level:2},{value:"Example: Verifying a Proof",id:"example-verifying-a-proof",level:3},{value:"Pruned vs. Full Merkle-paths",id:"pruned-vs-full-merkle-paths",level:2},{value:"Handling Partial Tree Storage",id:"handling-partial-tree-storage",level:2}],o={toc:l},g="wrapper";function y(e){let{components:a,...m}=e;return(0,r.yg)(g,(0,t.A)({},o,m,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"merkle-tree-api-documentation"},"Merkle Tree API Documentation"),(0,r.yg)("h2",{id:"what-is-a-merkle-tree"},"What is a Merkle Tree?"),(0,r.yg)("p",null,"A ",(0,r.yg)("strong",{parentName:"p"},"Merkle tree")," is a cryptographic data structure that allows for ",(0,r.yg)("strong",{parentName:"p"},"efficient verification of data integrity"),". It consists of:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Leaf nodes"),", each containing a piece of data."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Internal nodes"),", which store the ",(0,r.yg)("strong",{parentName:"li"},"hashes of their child nodes"),", make up the layers leading to the ",(0,r.yg)("strong",{parentName:"li"},"root node")," which is the cryptographic commitment.")),(0,r.yg)("h2",{id:"tree-structure-and-configuration"},"Tree Structure and Configuration"),(0,r.yg)("h3",{id:"structure-definition"},"Structure Definition"),(0,r.yg)("p",null,"With ICICLE, you have the ",(0,r.yg)("strong",{parentName:"p"},"flexibility")," to build various tree topologies based on your needs. A tree is defined by:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Hasher per layer")," (",(0,r.yg)("a",{parentName:"li",href:"/icicle/primitives/hash"},"Link to Hasher API"),") with a ",(0,r.yg)("strong",{parentName:"li"},"default input size"),"."),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Size of a leaf element")," (in bytes): This defines the ",(0,r.yg)("strong",{parentName:"li"},"granularity")," of the data used for opening proofs.")),(0,r.yg)("p",null,"The ",(0,r.yg)("strong",{parentName:"p"},"root node")," is assumed to be a single node. The ",(0,r.yg)("strong",{parentName:"p"},"height of the tree")," is determined by the ",(0,r.yg)("strong",{parentName:"p"},"number of layers"),".\nEach layer's ",(0,r.yg)("strong",{parentName:"p"},"arity")," is calculated as:"),(0,r.yg)("div",{className:"math math-display"},(0,r.yg)("span",{parentName:"div",className:"katex-display"},(0,r.yg)("span",{parentName:"span",className:"katex"},(0,r.yg)("span",{parentName:"span",className:"katex-mathml"},(0,r.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,r.yg)("semantics",{parentName:"math"},(0,r.yg)("mrow",{parentName:"semantics"},(0,r.yg)("msub",{parentName:"mrow"},(0,r.yg)("mrow",{parentName:"msub"},(0,r.yg)("mi",{parentName:"mrow"},"a"),(0,r.yg)("mi",{parentName:"mrow"},"r"),(0,r.yg)("mi",{parentName:"mrow"},"i"),(0,r.yg)("mi",{parentName:"mrow"},"t"),(0,r.yg)("mi",{parentName:"mrow"},"y")),(0,r.yg)("mi",{parentName:"msub"},"i")),(0,r.yg)("mo",{parentName:"mrow"},"="),(0,r.yg)("mfrac",{parentName:"mrow"},(0,r.yg)("mrow",{parentName:"mfrac"},(0,r.yg)("mi",{parentName:"mrow"},"l"),(0,r.yg)("mi",{parentName:"mrow"},"a"),(0,r.yg)("mi",{parentName:"mrow"},"y"),(0,r.yg)("mi",{parentName:"mrow"},"e"),(0,r.yg)("mi",{parentName:"mrow"},"r"),(0,r.yg)("mi",{parentName:"mrow"},"s"),(0,r.yg)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,r.yg)("mi",{parentName:"mrow"},"i"),(0,r.yg)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,r.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,r.yg)("mi",{parentName:"mrow"},"i"),(0,r.yg)("mi",{parentName:"mrow"},"n"),(0,r.yg)("mi",{parentName:"mrow"},"p"),(0,r.yg)("mi",{parentName:"mrow"},"u"),(0,r.yg)("mi",{parentName:"mrow"},"t"),(0,r.yg)("mi",{parentName:"mrow"},"S"),(0,r.yg)("mi",{parentName:"mrow"},"i"),(0,r.yg)("mi",{parentName:"mrow"},"z"),(0,r.yg)("mi",{parentName:"mrow"},"e")),(0,r.yg)("mrow",{parentName:"mfrac"},(0,r.yg)("mi",{parentName:"mrow"},"l"),(0,r.yg)("mi",{parentName:"mrow"},"a"),(0,r.yg)("mi",{parentName:"mrow"},"y"),(0,r.yg)("mi",{parentName:"mrow"},"e"),(0,r.yg)("mi",{parentName:"mrow"},"r"),(0,r.yg)("mi",{parentName:"mrow"},"s"),(0,r.yg)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,r.yg)("mi",{parentName:"mrow"},"i"),(0,r.yg)("mo",{parentName:"mrow"},"\u2212"),(0,r.yg)("mn",{parentName:"mrow"},"1"),(0,r.yg)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,r.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,r.yg)("mi",{parentName:"mrow"},"o"),(0,r.yg)("mi",{parentName:"mrow"},"u"),(0,r.yg)("mi",{parentName:"mrow"},"t"),(0,r.yg)("mi",{parentName:"mrow"},"p"),(0,r.yg)("mi",{parentName:"mrow"},"u"),(0,r.yg)("mi",{parentName:"mrow"},"t"),(0,r.yg)("mi",{parentName:"mrow"},"S"),(0,r.yg)("mi",{parentName:"mrow"},"i"),(0,r.yg)("mi",{parentName:"mrow"},"z"),(0,r.yg)("mi",{parentName:"mrow"},"e")))),(0,r.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{arity}_i = \\frac{layers[i].inputSize}{layers[i-1].outputSize}")))),(0,r.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.yg)("span",{parentName:"span",className:"base"},(0,r.yg)("span",{parentName:"span",className:"strut",style:{height:"0.9037em",verticalAlign:"-0.2441em"}}),(0,r.yg)("span",{parentName:"span",className:"mord"},(0,r.yg)("span",{parentName:"span",className:"mord"},(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y")),(0,r.yg)("span",{parentName:"span",className:"msupsub"},(0,r.yg)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.yg)("span",{parentName:"span",className:"vlist-r"},(0,r.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.2175em"}},(0,r.yg)("span",{parentName:"span",style:{top:"-2.4559em",marginRight:"0.05em"}},(0,r.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,r.yg)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.yg)("span",{parentName:"span",className:"vlist-r"},(0,r.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.2441em"}},(0,r.yg)("span",{parentName:"span"})))))),(0,r.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.yg)("span",{parentName:"span",className:"mrel"},"="),(0,r.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.yg)("span",{parentName:"span",className:"base"},(0,r.yg)("span",{parentName:"span",className:"strut",style:{height:"2.363em",verticalAlign:"-0.936em"}}),(0,r.yg)("span",{parentName:"span",className:"mord"},(0,r.yg)("span",{parentName:"span",className:"mopen nulldelimiter"}),(0,r.yg)("span",{parentName:"span",className:"mfrac"},(0,r.yg)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.yg)("span",{parentName:"span",className:"vlist-r"},(0,r.yg)("span",{parentName:"span",className:"vlist",style:{height:"1.427em"}},(0,r.yg)("span",{parentName:"span",style:{top:"-2.314em"}},(0,r.yg)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.yg)("span",{parentName:"span",className:"mord"},(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"yers"),(0,r.yg)("span",{parentName:"span",className:"mopen"},"["),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,r.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.yg)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,r.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.yg)("span",{parentName:"span",className:"mord"},"1"),(0,r.yg)("span",{parentName:"span",className:"mclose"},"]"),(0,r.yg)("span",{parentName:"span",className:"mord"},"."),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"u"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"tp"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"u"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"tS"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"ze"))),(0,r.yg)("span",{parentName:"span",style:{top:"-3.23em"}},(0,r.yg)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.yg)("span",{parentName:"span",className:"frac-line",style:{borderBottomWidth:"0.04em"}})),(0,r.yg)("span",{parentName:"span",style:{top:"-3.677em"}},(0,r.yg)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.yg)("span",{parentName:"span",className:"mord"},(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"yers"),(0,r.yg)("span",{parentName:"span",className:"mopen"},"["),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,r.yg)("span",{parentName:"span",className:"mclose"},"]"),(0,r.yg)("span",{parentName:"span",className:"mord"},"."),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"in"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"u"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"tS"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"ze")))),(0,r.yg)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.yg)("span",{parentName:"span",className:"vlist-r"},(0,r.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.936em"}},(0,r.yg)("span",{parentName:"span"}))))),(0,r.yg)("span",{parentName:"span",className:"mclose nulldelimiter"}))))))),(0,r.yg)("p",null,"For ",(0,r.yg)("strong",{parentName:"p"},"layer 0"),":"),(0,r.yg)("div",{className:"math math-display"},(0,r.yg)("span",{parentName:"div",className:"katex-display"},(0,r.yg)("span",{parentName:"span",className:"katex"},(0,r.yg)("span",{parentName:"span",className:"katex-mathml"},(0,r.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,r.yg)("semantics",{parentName:"math"},(0,r.yg)("mrow",{parentName:"semantics"},(0,r.yg)("msub",{parentName:"mrow"},(0,r.yg)("mrow",{parentName:"msub"},(0,r.yg)("mi",{parentName:"mrow"},"a"),(0,r.yg)("mi",{parentName:"mrow"},"r"),(0,r.yg)("mi",{parentName:"mrow"},"i"),(0,r.yg)("mi",{parentName:"mrow"},"t"),(0,r.yg)("mi",{parentName:"mrow"},"y")),(0,r.yg)("mn",{parentName:"msub"},"0")),(0,r.yg)("mo",{parentName:"mrow"},"="),(0,r.yg)("mfrac",{parentName:"mrow"},(0,r.yg)("mrow",{parentName:"mfrac"},(0,r.yg)("mi",{parentName:"mrow"},"l"),(0,r.yg)("mi",{parentName:"mrow"},"a"),(0,r.yg)("mi",{parentName:"mrow"},"y"),(0,r.yg)("mi",{parentName:"mrow"},"e"),(0,r.yg)("mi",{parentName:"mrow"},"r"),(0,r.yg)("mi",{parentName:"mrow"},"s"),(0,r.yg)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,r.yg)("mn",{parentName:"mrow"},"0"),(0,r.yg)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,r.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,r.yg)("mi",{parentName:"mrow"},"i"),(0,r.yg)("mi",{parentName:"mrow"},"n"),(0,r.yg)("mi",{parentName:"mrow"},"p"),(0,r.yg)("mi",{parentName:"mrow"},"u"),(0,r.yg)("mi",{parentName:"mrow"},"t"),(0,r.yg)("mi",{parentName:"mrow"},"S"),(0,r.yg)("mi",{parentName:"mrow"},"i"),(0,r.yg)("mi",{parentName:"mrow"},"z"),(0,r.yg)("mi",{parentName:"mrow"},"e")),(0,r.yg)("mrow",{parentName:"mfrac"},(0,r.yg)("mi",{parentName:"mrow"},"l"),(0,r.yg)("mi",{parentName:"mrow"},"e"),(0,r.yg)("mi",{parentName:"mrow"},"a"),(0,r.yg)("mi",{parentName:"mrow"},"f"),(0,r.yg)("mi",{parentName:"mrow"},"S"),(0,r.yg)("mi",{parentName:"mrow"},"i"),(0,r.yg)("mi",{parentName:"mrow"},"z"),(0,r.yg)("mi",{parentName:"mrow"},"e")))),(0,r.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{arity}_0 = \\frac{layers[0].inputSize}{leafSize}")))),(0,r.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.yg)("span",{parentName:"span",className:"base"},(0,r.yg)("span",{parentName:"span",className:"strut",style:{height:"0.9037em",verticalAlign:"-0.2441em"}}),(0,r.yg)("span",{parentName:"span",className:"mord"},(0,r.yg)("span",{parentName:"span",className:"mord"},(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y")),(0,r.yg)("span",{parentName:"span",className:"msupsub"},(0,r.yg)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.yg)("span",{parentName:"span",className:"vlist-r"},(0,r.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.207em"}},(0,r.yg)("span",{parentName:"span",style:{top:"-2.4559em",marginRight:"0.05em"}},(0,r.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.yg)("span",{parentName:"span",className:"mord mtight"},"0")))),(0,r.yg)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.yg)("span",{parentName:"span",className:"vlist-r"},(0,r.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.2441em"}},(0,r.yg)("span",{parentName:"span"})))))),(0,r.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.yg)("span",{parentName:"span",className:"mrel"},"="),(0,r.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.yg)("span",{parentName:"span",className:"base"},(0,r.yg)("span",{parentName:"span",className:"strut",style:{height:"2.3074em",verticalAlign:"-0.8804em"}}),(0,r.yg)("span",{parentName:"span",className:"mord"},(0,r.yg)("span",{parentName:"span",className:"mopen nulldelimiter"}),(0,r.yg)("span",{parentName:"span",className:"mfrac"},(0,r.yg)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.yg)("span",{parentName:"span",className:"vlist-r"},(0,r.yg)("span",{parentName:"span",className:"vlist",style:{height:"1.427em"}},(0,r.yg)("span",{parentName:"span",style:{top:"-2.314em"}},(0,r.yg)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.yg)("span",{parentName:"span",className:"mord"},(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"S"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"ze"))),(0,r.yg)("span",{parentName:"span",style:{top:"-3.23em"}},(0,r.yg)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.yg)("span",{parentName:"span",className:"frac-line",style:{borderBottomWidth:"0.04em"}})),(0,r.yg)("span",{parentName:"span",style:{top:"-3.677em"}},(0,r.yg)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.yg)("span",{parentName:"span",className:"mord"},(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"yers"),(0,r.yg)("span",{parentName:"span",className:"mopen"},"["),(0,r.yg)("span",{parentName:"span",className:"mord"},"0"),(0,r.yg)("span",{parentName:"span",className:"mclose"},"]"),(0,r.yg)("span",{parentName:"span",className:"mord"},"."),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"in"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"u"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"tS"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal"},"ze")))),(0,r.yg)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.yg)("span",{parentName:"span",className:"vlist-r"},(0,r.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.8804em"}},(0,r.yg)("span",{parentName:"span"}))))),(0,r.yg)("span",{parentName:"span",className:"mclose nulldelimiter"}))))))),(0,r.yg)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},"Each layer has a shrinking-factor defined by ",(0,r.yg)("span",{parentName:"p",className:"math math-inline"},(0,r.yg)("span",{parentName:"span",className:"katex"},(0,r.yg)("span",{parentName:"span",className:"katex-mathml"},(0,r.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.yg)("semantics",{parentName:"math"},(0,r.yg)("mrow",{parentName:"semantics"},(0,r.yg)("mfrac",{parentName:"mrow"},(0,r.yg)("mrow",{parentName:"mfrac"},(0,r.yg)("mi",{parentName:"mrow"},"l"),(0,r.yg)("mi",{parentName:"mrow"},"a"),(0,r.yg)("mi",{parentName:"mrow"},"y"),(0,r.yg)("mi",{parentName:"mrow"},"e"),(0,r.yg)("mi",{parentName:"mrow"},"r"),(0,r.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,r.yg)("mi",{parentName:"mrow"},"o"),(0,r.yg)("mi",{parentName:"mrow"},"u"),(0,r.yg)("mi",{parentName:"mrow"},"t"),(0,r.yg)("mi",{parentName:"mrow"},"p"),(0,r.yg)("mi",{parentName:"mrow"},"u"),(0,r.yg)("mi",{parentName:"mrow"},"t"),(0,r.yg)("mi",{parentName:"mrow"},"S"),(0,r.yg)("mi",{parentName:"mrow"},"i"),(0,r.yg)("mi",{parentName:"mrow"},"z"),(0,r.yg)("mi",{parentName:"mrow"},"e")),(0,r.yg)("mrow",{parentName:"mfrac"},(0,r.yg)("mi",{parentName:"mrow"},"l"),(0,r.yg)("mi",{parentName:"mrow"},"a"),(0,r.yg)("mi",{parentName:"mrow"},"y"),(0,r.yg)("mi",{parentName:"mrow"},"e"),(0,r.yg)("mi",{parentName:"mrow"},"r"),(0,r.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,r.yg)("mi",{parentName:"mrow"},"i"),(0,r.yg)("mi",{parentName:"mrow"},"n"),(0,r.yg)("mi",{parentName:"mrow"},"p"),(0,r.yg)("mi",{parentName:"mrow"},"u"),(0,r.yg)("mi",{parentName:"mrow"},"t"),(0,r.yg)("mi",{parentName:"mrow"},"S"),(0,r.yg)("mi",{parentName:"mrow"},"i"),(0,r.yg)("mi",{parentName:"mrow"},"z"),(0,r.yg)("mi",{parentName:"mrow"},"e")))),(0,r.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\frac{layer.outputSize}{layer.inputSize}")))),(0,r.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.yg)("span",{parentName:"span",className:"base"},(0,r.yg)("span",{parentName:"span",className:"strut",style:{height:"1.4133em",verticalAlign:"-0.4811em"}}),(0,r.yg)("span",{parentName:"span",className:"mord"},(0,r.yg)("span",{parentName:"span",className:"mopen nulldelimiter"}),(0,r.yg)("span",{parentName:"span",className:"mfrac"},(0,r.yg)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.yg)("span",{parentName:"span",className:"vlist-r"},(0,r.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.9322em"}},(0,r.yg)("span",{parentName:"span",style:{top:"-2.655em"}},(0,r.yg)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.yg)("span",{parentName:"span",className:"mord mtight"},(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.01968em"}},"l"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"a"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.02778em"}},"yer"),(0,r.yg)("span",{parentName:"span",className:"mord mtight"},"."),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"in"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"p"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"u"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.05764em"}},"tS"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"ze")))),(0,r.yg)("span",{parentName:"span",style:{top:"-3.23em"}},(0,r.yg)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.yg)("span",{parentName:"span",className:"frac-line",style:{borderBottomWidth:"0.04em"}})),(0,r.yg)("span",{parentName:"span",style:{top:"-3.4461em"}},(0,r.yg)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.yg)("span",{parentName:"span",className:"mord mtight"},(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.01968em"}},"l"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"a"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.02778em"}},"yer"),(0,r.yg)("span",{parentName:"span",className:"mord mtight"},"."),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"o"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"u"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"tp"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"u"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.05764em"}},"tS"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"),(0,r.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"ze"))))),(0,r.yg)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.yg)("span",{parentName:"span",className:"vlist-r"},(0,r.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.4811em"}},(0,r.yg)("span",{parentName:"span"}))))),(0,r.yg)("span",{parentName:"span",className:"mclose nulldelimiter"})))))),".\nThis factor is used to compute the input size, assuming a single root node."))),(0,r.yg)("p",null,"When dealing with very large Merkle trees, storing the entire tree can be memory-intensive. To manage this, ICICLE allows users to store only the upper layers of the tree while omitting the lower layers, which can be recomputed later as needed. This approach conserves memory but requires recomputing the omitted layers when generating Merkle proofs."),(0,r.yg)("h3",{id:"defining-a-merkle-tree"},"Defining a Merkle Tree"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"// icicle/merkle/merkle_tree.h\nstatic MerkleTree create(\n    const std::vector<Hash>& layer_hashers,\n    uint64_t leaf_element_size,\n    uint64_t output_store_min_layer = 0);\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"output_store_min_layer")," parameter defines the lowest layer that will be stored in memory. Layers below this value will not be stored, saving memory at the cost of additional computation when proofs are generated."),(0,r.yg)("h3",{id:"building-the-tree"},"Building the Tree"),(0,r.yg)("p",null,"The Merkle tree can be constructed from input data of any type, allowing flexibility in its usage. The size of the input must align with the tree structure defined by the hash layers and leaf size. If the input size does not match the expected size, padding may be applied."),(0,r.yg)("p",null,"Refer to the ",(0,r.yg)("a",{parentName:"p",href:"#padding"},"Padding Section")," for more details on how mismatched input sizes are handled."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"// icicle/merkle/merkle_tree.h\ninline eIcicleError build(\n    const std::byte* leaves,\n    uint64_t leaves_size,\n    const MerkleTreeConfig& config);\n\ntemplate <typename T>\ninline eIcicleError build(\n    const T* leaves,\n    uint64_t nof_leaves,\n    const MerkleTreeConfig& config);\n")),(0,r.yg)("h2",{id:"tree-examples"},"Tree Examples"),(0,r.yg)("h3",{id:"example-a-binary-tree"},"Example A: Binary Tree"),(0,r.yg)("p",null,"A binary tree with ",(0,r.yg)("strong",{parentName:"p"},"5 layers"),", using ",(0,r.yg)("strong",{parentName:"p"},"Keccak-256"),":"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Merkle Tree Diagram",src:n(2626).A,width:"1539",height:"968"})),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"const uint64_t leaf_size = 1024;\n// Allocate a dummy input. It can be any type as long as the total size matches.\nconst uint32_t max_input_size = leaf_size * 16;\nauto input = std::make_unique<uint64_t[]>(max_input_size / sizeof(uint64_t));\n\n// Define hashers\nauto hash = Keccak256::create(leaf_size); // hash 1KB -> 32B\nauto compress = Keccak256::create(2 * hasher.output_size()); // hash every 64B to 32B\n\n// Construct the tree using the layer hashers and leaf-size\nstd::vector<Hash> hashers = {hasher, compress, compress, compress, compress};\nauto merkle_tree = MerkleTree::create(hashers, leaf_size);\n\n// compute the tree\nmerkle_tree.build(input.get(), max_input_size / sizeof(uint64_t), default_merkle_tree_config());\n")),(0,r.yg)("h3",{id:"example-b-tree-with-arity-4"},"Example B: Tree with Arity 4"),(0,r.yg)("p",null,"This example uses ",(0,r.yg)("strong",{parentName:"p"},"Blake2s")," in the upper layer:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Merkle Tree Diagram",src:n(7161).A,width:"1532",height:"621"})),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "icicle/merkle/merkle_tree.h"\n\nconst uint64_t leaf_size = 1024;\nconst uint32_t max_input_size = leaf_size * 16;\nauto input = std::make_unique<uint64_t[]>(max_input_size / sizeof(uint64_t));\n\n// note here we use Blake2S for the upper layer\nauto hash = Keccak256::create(leaf_size);\nauto compress = Blake2s::create(4 * hash.output_size());\n\nstd::vector<Hash> hashers = {hash, compress, compress};\nauto merkle_tree = MerkleTree::create(hashers, leaf_size);\n\nmerkle_tree.build(input.get(), max_input_size / sizeof(uint64_t), default_merkle_tree_config());\n')),(0,r.yg)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},"Any combination of hashers is valid including ",(0,r.yg)("strong",{parentName:"p"},"Poseidon")," that computes on field elements."))),(0,r.yg)("h2",{id:"padding"},"Padding"),(0,r.yg)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},"Padding feature is not yet supported in ",(0,r.yg)("strong",{parentName:"p"},"v3.1")," and is planned for ",(0,r.yg)("strong",{parentName:"p"},"v3.2"),"."))),(0,r.yg)("p",null,"When the input for ",(0,r.yg)("strong",{parentName:"p"},"layer 0")," is smaller than expected, ICICLE can apply ",(0,r.yg)("strong",{parentName:"p"},"padding")," to align the data."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Padding Schemes:")),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Zero padding:")," Adds zeroes to the remaining space."),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Repeat last leaf:")," The final leaf element is repeated to fill the remaining space.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"auto config = default_merkle_tree_config();\nconfig.padding_policy = PaddingPolicy::ZeroPadding;\nmerkle_tree.build(input.get(), max_input_size / sizeof(uint64_t), config);\n")),(0,r.yg)("h2",{id:"root-as-commitment"},"Root as Commitment"),(0,r.yg)("p",null,"Retrieve the Merkle-root and serialize."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"/**\n * @brief Returns a pair containing the pointer to the root (ON HOST) data and its size.\n * @return A pair of (root data pointer, root size).\n */\ninline std::pair<const std::byte*, size_t> get_merkle_root() const;\n\nauto [commitment, size] = merkle_tree.get_merkle_root();\nserialize_commitment_application_code(...);\n")),(0,r.yg)("div",{className:"admonition admonition-warning alert alert--danger"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},"The commitment can be serialized to the proof. This is not handled by ICICLE."))),(0,r.yg)("h2",{id:"generating-merkle-proofs"},"Generating Merkle Proofs"),(0,r.yg)("p",null,"Merkle proofs are used to ",(0,r.yg)("strong",{parentName:"p"},"prove the integrity of opened leaves")," in a Merkle tree. A proof ensures that a specific leaf belongs to the committed data by enabling the verifier to reconstruct the ",(0,r.yg)("strong",{parentName:"p"},"root hash (commitment)"),"."),(0,r.yg)("p",null,"A Merkle proof contains:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Leaf"),": The data being verified."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Index")," (leaf_idx): The position of the leaf in the original dataset."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Path"),": A sequence of sibling hashes (tree nodes) needed to recompute the path from the leaf to the root.")),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Merkle Pruned Phat Diagram",src:n(9434).A,width:"1523",height:"723"})),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"// icicle/merkle/merkle_proof.h\nclass MerkleProof {\n    // Represents the Merkle proof with leaf, root, and path data.\n};\n")),(0,r.yg)("h3",{id:"example-generating-a-proof"},"Example: Generating a Proof"),(0,r.yg)("p",null,"Generating a proof for leaf idx 3:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"MerkleProof proof{};\nauto err = merkle_tree.get_merkle_proof(\n    input.get(),\n    max_input_size / sizeof(uint64_t),\n    3 /*leaf-idx*/, true,\n    default_merkle_tree_config(), proof);\n\nauto [_leaf, _leaf_size, _leaf_idx] = proof.get_leaf();\nauto [_path, _path_size] = proof.get_path();\n")),(0,r.yg)("div",{className:"admonition admonition-warning alert alert--danger"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},"The Merkle-path can be serialized to the proof along with the leaf. This is not handled by ICICLE."))),(0,r.yg)("h2",{id:"verifying-merkle-proofs"},"Verifying Merkle Proofs"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"/**\n * @brief Verify an element against the Merkle path using layer hashers.\n * @param merkle_proof The MerkleProof object includes the leaf, path, and the root.\n * @param valid output valid bit. True if the proof is valid, false otherwise.\n */\neIcicleError verify(const MerkleProof& merkle_proof, bool& valid) const\n")),(0,r.yg)("h3",{id:"example-verifying-a-proof"},"Example: Verifying a Proof"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"bool valid = false;\nauto err = merkle_tree.verify(proof, valid);\n")),(0,r.yg)("h2",{id:"pruned-vs-full-merkle-paths"},"Pruned vs. Full Merkle-paths"),(0,r.yg)("p",null,"A ",(0,r.yg)("strong",{parentName:"p"},"Merkle path")," is a collection of ",(0,r.yg)("strong",{parentName:"p"},"sibling hashes")," that allows the verifier to ",(0,r.yg)("strong",{parentName:"p"},"reconstruct the root hash")," from a specific leaf.\nThis enables anyone with the ",(0,r.yg)("strong",{parentName:"p"},"path and root")," to verify that the ",(0,r.yg)("strong",{parentName:"p"},"leaf")," belongs to the committed dataset.\nThere are two types of paths that can be computed:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#generating-merkle-proofs"},(0,r.yg)("strong",{parentName:"a"},"Pruned Path:"))," Contains only necessary sibling hashes."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Full Path:")," Contains all sibling nodes and intermediate hashes.")),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Merkle Full Path Diagram",src:n(6744).A,width:"1523",height:"723"})),(0,r.yg)("p",null,"To compute a full path, specify ",(0,r.yg)("inlineCode",{parentName:"p"},"pruned=false"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"MerkleProof proof{};\nauto err = merkle_tree.get_merkle_proof(\n    input.get(),\n    max_input_size / sizeof(uint64_t),\n    3 /*leaf-idx*/, false /*=pruned*/,  // --\x3e note the pruned flag here\n    default_merkle_tree_config(), proof);\n")),(0,r.yg)("h2",{id:"handling-partial-tree-storage"},"Handling Partial Tree Storage"),(0,r.yg)("p",null,"In cases where the ",(0,r.yg)("strong",{parentName:"p"},"Merkle tree is large"),", only the ",(0,r.yg)("strong",{parentName:"p"},"top layers")," may be stored to conserve memory.\nWhen opening leaves, the ",(0,r.yg)("strong",{parentName:"p"},"first layers")," (closest to the leaves) are ",(0,r.yg)("strong",{parentName:"p"},"recomputed dynamically"),"."),(0,r.yg)("p",null,"For example to avoid storing first layer we can define a tree as follows:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"const int min_layer_to_store = 1;\nauto merkle_tree = MerkleTree::create(hashers, leaf_size, min_layer_to_store);\n")))}y.isMDXComponent=!0},2626:(e,a,n)=>{n.d(a,{A:()=>t});const t=n.p+"assets/images/diagram1-c14b789ecbb50149820704c41d936c61.png"},9434:(e,a,n)=>{n.d(a,{A:()=>t});const t=n.p+"assets/images/diagram1_path-0865d68074ab3dc62654c62d92c00450.png"},6744:(e,a,n)=>{n.d(a,{A:()=>t});const t=n.p+"assets/images/diagram1_path_full-f27fb5d5f5ff39d38926712860b1da40.png"},7161:(e,a,n)=>{n.d(a,{A:()=>t});const t=n.p+"assets/images/diagram2-9ea2e302cb54350811182ac3d38527cb.png"},1873:(e,a,n)=>{n(6540)}}]);